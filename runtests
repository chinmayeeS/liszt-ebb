#!./bin/ebb
local ffi = require "ffi"

local USE_LEGION = false
local USE_GPU    = false
local NO_DEBUG   = false
local ONE_LINE_ERR = false

if #arg > 0 then
  for i=1,#arg do
    if arg[i] == '-legion' or arg[i] == '--legion' then
      USE_LEGION = true
    end
    if arg[i] == '-gpu' or arg[i] == '--gpu' then
      USE_GPU = true
    end
    if arg[i] == '-nodebug' or arg[i] == '--nodebug' then
      NO_DEBUG = true
    end
    if arg[i] == '-h' or arg[i] == '--help' then
      print("Usage : run_tests [options]")
      print("Options:")
      print("  -h, --help             show this help message and exit")
      print("  -legion, --legion      run tests with legion")
      print("  -gpu, --gpu            run tests on the GPU")
      os.exit(0)
    end
  end
end

local lscmd
if ffi.os == "Windows" then
  lscmd = "cmd /c dir /b /s"
else
  lscmd = "find . | cut -c 3-"
end

local passed     = {}
local bad_passed = {}
local failed     = {}
local disabled   = {}

local exclude = {
  ['tests/test.lua'] = true,
}

local disable_str = '--DISABLE-TEST'
local disable_gpu_str = '--DISABLE-ON-GPU'
local disable_legion_str = '--DISABLE-ON-LEGION'
local function str_starts_with(str, prefix)
  return string.sub(str,1,#prefix) == prefix
end
local function is_disabled (filename)
  local h = io.open(filename, "r")
  local line1 = h:read()
  local line2 = h:read()
  io.close(h)
  local disabled_all    = false
  local disabled_gpu    = false
  local disabled_legion = false
  if line1 then
    disabled_all    = disabled_all or str_starts_with(line1, disable_str)
    disabled_gpu    = disabled_gpu or str_starts_with(line1, disable_gpu_str)
    disabled_legion = disabled_legion or
                      str_starts_with(line1, disable_legion_str)
  end
  if line2 then
    disabled_all    = disabled_all or str_starts_with(line2, disable_str)
    disabled_gpu    = disabled_gpu or str_starts_with(line2, disable_gpu_str)
    disabled_legion = disabled_legion or
                      str_starts_with(line2, disable_legion_str)
  end
  return disabled_all or (USE_GPU     and disabled_gpu)
                      or (USE_LEGION  and disabled_legion)
end

local function output_name (filename)
  local outname = filename:gsub("/(.-)%.t$", "/%1.out")
  -- check whether the file exists
  if outname ~= filename then
    local f = io.open(outname,"r")
    if f then
      io.close(f)
      return outname
    end
  end
  -- implicitly return nil if there is no file match
end

print("==================")
print("= Running tests...")
print("==================")
for line in io.popen(lscmd):lines() do
  if ffi.os == "Windows" then
    local cwd = io.popen("cmd /c echo %cd%"):read()
    line = line:sub(cwd:len()+2)
    line = line:gsub("\\","/")
  end
  local file = line:match("^(tests/.*%.t)$") or line:match("^(tests/.*%.lua)$")
  local out_file = file and output_name(file)
  if file and not exclude[file] then
    if is_disabled(file) then
      table.insert(disabled, file)
    else
      print(file)
      local should_fail = (file:match("fails/") ~= nil)
      local execstring = "./liszt "
      if USE_LEGION then
        execstring = execstring .. " --legion -n "
      end
      if USE_GPU then
        execstring = execstring .. " --gpu "
      end
      execstring = execstring .. file
      -- If we expect output from this test, log stdout
      if out_file then
        execstring = execstring .. " | grep -v INFO > .test_out"
      elseif should_fail then
        execstring = execstring .. " > /dev/null 2>&1"
      end

      --things in the fail directory should cause terra compiler errors
      --we dont check for the particular error
      local success = os.execute(execstring)
      -- if we expect output, modulate the success appropriately
      if out_file and success == 0 then
        -- compare .test_out to out_file
        local diff_string = 'diff .test_out ' .. out_file
        success = os.execute(diff_string)
      end
      -- record/report failure/success appropriately
      if success ~= 0 and not should_fail then
        table.insert(failed,file)
        print(file .. " \27[31mFAILED\27[0m")
      elseif success == 0 and should_fail then
        table.insert(bad_passed,file)
        print(file .. " \27[31mFAILED\27[0m")
      else
        table.insert(passed,file)
      end
    end
  end
end

-- cleanup temp files if they exist
os.execute('rm .test_out')

print("==================")
print()

local function printtests(nm,lst)
  if #lst > 0 then
    print("==================")
    print("= "..nm)
    print("==================")
    for i,e in ipairs(lst) do
      print(e)
    end
    print("==================")
    print()
  end
end
--printtests("passing tests",passed)
printtests("passing tests", passed)
printtests("FAILING tests",failed)
printtests("passed but should have failed",bad_passed)
printtests("disabled tests",disabled)

print(tostring(#passed).." tests passed, "..tostring(#failed + #bad_passed).." tests failed. " .. tostring(#disabled) .. " tests disabled.")
